1 - Basicamente é a implementação de uma meta heurística pra encontrar a solução
ótima (ou uma solução boa o suficiente) sobre um problema np completo.
Além disso, tem que modelar o problema matematicamente no GLPK.

4 partes:
- Formulação matemática
- Implementação da meta heurística
- Relatório (de cunho bem científico, I like it)
- Apresentação

2 - Formulação matemática
Separar dados de formulação.
Deve conter um arquivo .mod (what is that supposed to be?) e arquivos de dados
das instâncias no padrão GLPK (não sei tbm que padrão é esse kk)

3 - Implementação
Qualquer linguagem open source sem bibliotecas proprietárias.
Cuidar com:
- Documentação, legibilidade.
- Parâmetros recebidos via linha de comando (principalmente a semente para o
  gerador de números aleatórios)
- A eficiência da implementação e a qualidade das soluções serão consideradas na
  avaliação.
- Não pode parar a execução por um critério de tempo. Usar: número de iterações,
  iterações sem encontrar solução melhor, proximidade de limitante. Evitar que
  demore mais que 5 minutos.

Entregar o código fonte.
Entregar README informando como compilar/executar e dependências.

4 - Relatório
No máximo 6 páginas (sem capa e referências)
- Intro: explicação sobre a meta heurística
- Problema: problema e sua formulação matemática explicada. Ressaltar utilidade
  de cada restrição e a função objetivo.
- Descrição detalhada do algoritmo:
  Representação do problema
  Estruturas de dados
  Geração da solução inicial
  Vizinhanças e estratégia de seleção de vizinhos
  Parâmetros do método
  Critérios de parada
- Tabela de resultados:
  Relaxação linear do GLPK com a formulação ?????????
  Valor da melhor sol inteira encontrada pelo GLPK com a nossa formulação
  Runtime
  Valor médio da solução inicial do algoritmo
  Valor médio da melhor solução encontrada
  Desvio padrão das melhores soluções
  Runtime médio
  Desvio percentual médio das soluções obtidas pelo nosso alg com relação à
melhor solução conhecida
- Análise dos resultados
- Conclusões
- Refs

Usar média de 10 execuções pra cada instância (o que são instâncias???).
Execuções feitas com uma seed aleatória diferente (ver mais)

DICAS:
- Analisar bem a complexidade do algoritmo considerando as EDs
- Como perder pontos, do Ritt (VER)
- Cheat sheet do Ritt sobre o GLPK

Sobre Simulated Annealing:
É a mesma coisa que o hill climbing, mas com a questão de permitir escolhas
menos boas pra garantir que não se está preso em um ótimo local:

estado_atual = estado_random(); // sol inicial aleatória

para t : 1 ... condição de parada {
  temp--; // ou decresce de alguma outra forma, não necessariamente -1

  se temp == 0
    retorna estado_atual // pq ele é a última melhor escolha encontrada

  para i : 1 ... N { // TODO verificar o que pode ser esse N
    (1) estado_candidato = vizinho_random(estado_atual);

    diff_estado = valor(estado_candidato) - valor(estado_atual)

    se diff_estado > 0 // significa que o vizinho encontrado é a nova melhor solução
      estado_atual = estado_candidato // novo melhor estado
    senão
      estado_atual = estado_candidato com prob E relacionada à temp ****
  }
}

**** Isso é justamente a probabilidade/chance que se dá para escolhas ruins. Não
foi possível encontrar uma solução melhor em (1), mas se a temperatura temp for
alta o suficiente, pode-se permitir uma escolha menos boa a partir da solução
atual ótima.

Então, trazendo pro escopo do trabalho:

FLOWSHOP: Permutational Flowshop Scheduling Problem

- n tarefas a serem processadas
a serem alocadas em
- m máquinas disponíveis
- tempos de processamento Tir > 0
      1 <= i <= n
      1 <= r <= m

Restrições:
- tarefas devem ser processadas em sequência (há ordem de execução)
- cada tarefa deve ser processada em todas as máquinas
- processamento sem preempção

Objetivo:
Minimizar o makespan ?
Solução:
Ordem de alocação das tarefas às máquinas

Ou seja, traduzindo o que diz na wikipedia:
There are m machines and n jobs. Each job contains exactly m operations. The i-th
operation of the job must be executed on the i-th machine. No machine can perform
more than one operation simultaneously. For each operation of each job, execution
time is specified.
Operations within one job must be performed in the specified order. The first
operation gets executed on the first machine, then (as the first operation is
finished) the second operation on the second machine, and so on until the m-th
operation. Jobs can be executed in any order, however. Problem definition implies
that this job order is exactly the same for each machine. The problem is to
determine the optimal such arrangement, i.e. the one with the shortest possible
total job execution makespan.

Cada job ta dividido em m pedaços pra que cada pedaço seja executado em uma das
m máquinas. Esses pedaços devem ser executados sequencialmente, respeitando a
ordem em que eles aparecem no job. O pedaço m deve ser executado na máquina m
antes de o pedaço m+1 ser executado na máquina m+1.
O objetivo é que o tempo total de execução do m-gésimo pedaço do n-gésimo job
seja executado no menor tempo possível na máquina m. Ou seja, reduzir o tempo de
execução de todos os pedaços de todas as aplicações em suas devidas máquinas.


Okay, useful links:
https://en.wikipedia.org/wiki/Flow_shop_scheduling
http://www.diegm.uniud.it/schaerf/SAS/Projects/FlowShop.pdf
TODO entender cada detalhe desse último pdf
